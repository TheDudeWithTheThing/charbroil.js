// Generated by CoffeeScript 1.3.3

(function($, window) {
  var Charbroil, defaults, document, pluginName;
  pluginName = 'charbroil';
  document = window.document;
  defaults = {
    hot_key_css_class: 'charbroil-hot',
    modifier: 'ctrl',
    exclude: []
  };
  Charbroil = (function() {

    function Charbroil(element, options) {
      this.element = element;
      this.options = $.extend({}, defaults, options);
      this._defaults = defaults;
      this._name = pluginName;
      this._letter_score = [];
      this.init();
    }

    Charbroil.prototype.init = function() {
      var index, l, letter, link, text, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3;
      this.load_links();
      _ref = this.links;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        link = _ref[_i];
        text = $(link).html();
        for (_j = 0, _len1 = text.length; _j < _len1; _j++) {
          l = text[_j];
          index = l.toLowerCase();
          if (typeof this._letter_score[index] === 'undefined') {
            this._letter_score[index] = 0;
          }
          this._letter_score[index]++;
        }
      }
      _ref1 = this.links;
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        link = _ref1[_k];
        text = $(link).html();
        letter = $(link).attr('charbroil-key');
        if (!letter || this.options.exclude.indexOf(letter) > -1) {
          continue;
        }
        this.build_char_link(letter, text, link);
      }
      _ref2 = this.links;
      for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
        link = _ref2[_l];
        if (this.has_charbroil_span(link)) {
          continue;
        }
        text = $(link).html();
        letter = text[0];
        if (!letter || this.options.exclude.indexOf(letter) > -1) {
          continue;
        }
        this.build_char_link(letter, text, link);
      }
      _ref3 = this.links;
      for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
        link = _ref3[_m];
        if (this.has_charbroil_span(link)) {
          continue;
        }
        text = $(link).html();
        letter = this.find_lowest_score_letter(text.toLowerCase());
        if (!letter || this.options.exclude.indexOf(letter) > -1) {
          continue;
        }
        this.build_char_link(letter, text, link);
      }
      return this;
    };

    Charbroil.prototype.has_charbroil_span = function(link) {
      return $(link).find('span.' + this.options.hot_key_css_class).length > 0;
    };

    Charbroil.prototype.build_char_link = function(letter, text, link) {
      var after_letter, before_letter, finder_class_name, letter_index, replace_with, shortcut, shortcut_class_name;
      this.options.exclude.push(letter);
      letter_index = text.indexOf(letter);
      shortcut = this.build_shortcut_string(letter);
      shortcut_class_name = this.build_shortcut_class_name(shortcut);
      finder_class_name = this.get_finder_class_name(shortcut_class_name);
      replace_with = $("<span>" + letter + "</span>").addClass(this.options.hot_key_css_class);
      before_letter = text.substring(0, letter_index);
      after_letter = text.substring(letter_index + 1);
      $(link).addClass(shortcut_class_name);
      $(link).html(replace_with);
      $('.' + finder_class_name + ' span').before(before_letter).after(after_letter);
      return key(shortcut, function(e, h) {
        shortcut_class_name = 'charbroil-' + h.shortcut.replace('+', '-');
        return window.location = $('.' + shortcut_class_name).attr('href');
      });
    };

    Charbroil.prototype.load_links = function() {
      return this.links = $(this.element).find('a');
    };

    Charbroil.prototype.find_lowest_score_letter = function(word) {
      var char, letter, score, _i, _len;
      letter = word[0];
      score = this._letter_score[letter];
      for (_i = 0, _len = word.length; _i < _len; _i++) {
        char = word[_i];
        if (this._letter_score[char] < score) {
          letter = char;
          score = this._letter_score[char];
        }
      }
      return letter;
    };

    Charbroil.prototype.last_char = function(s) {
      return s.charAt(s.length(-1));
    };

    Charbroil.prototype.build_shortcut_string = function(letter) {
      var mod, mods;
      if (this.options.modifier instanceof Array) {
        mods = (function() {
          var _i, _len, _ref, _results;
          _ref = this.options.modifier;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            mod = _ref[_i];
            _results.push(mod + '+' + letter);
          }
          return _results;
        }).call(this);
        return mods.join(',');
      } else {
        return this.options.modifier + '+' + letter;
      }
    };

    Charbroil.prototype.build_shortcut_class_name = function(keys) {
      var classes, s;
      classes = (function() {
        var _i, _len, _ref, _results;
        _ref = keys.split(/,/);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          _results.push('charbroil-' + s.replace(/\+/g, '-'));
        }
        return _results;
      })();
      return classes.join(' ');
    };

    Charbroil.prototype.get_finder_class_name = function(shortcut_classes) {
      var classes;
      classes = shortcut_classes.split(' ');
      return classes[0];
    };

    return Charbroil;

  })();
  return $.fn[pluginName] = function(options) {
    return this.each(function() {
      if (!$.data(this, "plugin_" + pluginName)) {
        return $.data(this, "plugin_" + pluginName, new Charbroil(this, options));
      }
    });
  };
})(jQuery, window);
